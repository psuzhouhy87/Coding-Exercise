// Same as LeetCode 236
struct node {
	int data;
	node* left;
	node* right;
};

node* newNode(int value) {
	node* node1 = new node();
	node1->data = value;
	node1->left = NULL;
	node1->right = NULL;
	return node1;
}

bool findpath(node* root, vector<int>& path, int k) {
	if (root == NULL) return false;
	path.push_back(root->data);
	if (root->data == k) return true;
	if ((root->left != NULL && findpath(root->left, path, k)) || (root->right != NULL && findpath(root->right, path, k)))
		return true;
	path.pop_back();
	return false;
}

int findLCA(node* root, int n1, int n2) {
	vector<int>path1, path2;
	if (!findpath(root, path1, n1) || !findpath(root, path2, n2)) return -1;
	int i;
	for ( i = 0; i < path1.size() && i < path2.size(); i++) {
		if (path1[i] != path2[i]) break;
	}
	return path1[i - 1];
}


int main() {
	node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);
	root->right->left = newNode(6);
	root->right->right = newNode(7);

	vector<int> path;

	cout << "could we find the path? " << findpath(root, path, 7)<< endl;
	for (auto a : path) {
		cout << a << ", ";
	}
	int b = findLCA(root, 6,7);
	cout << "the result is " << b << endl;
	return 0;
}
