My anser:
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        if (nums[0] > target) return 0;
        else if (nums.back() < target) return nums.size();
        else{
            for (int i  = 0; i < nums.size(); i++){
                    if (nums[i] == target){
                            return i;   
                    }
                    else if (nums[i] < target && nums[i+1] > target){
                        return i+1;      
                    }
                }
            }
        
    }
};

1. 
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
	return distance(nums.begin(), lower_bound(nums.begin(), nums.end(), target));
    }
};

function distance(first, last) -> calculate the number of elements between first and last (ex: 1 2 3 4 5, distance(first, last) = 5)
function lower_bound(first, last, val) -> return an iterator pointing to the first element in the range [first, last) which does not compare less than val
