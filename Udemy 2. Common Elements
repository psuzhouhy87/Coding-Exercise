

Idea1: hashtable
vector<int> common_element(vector<int>& a, vector<int>& b) {
	unordered_map<int, int> container;
	vector<int> result;
	for (auto c : a) {
		container[c] = 1;
	}
	for (auto d : b) {
		if (container.find(d) != container.end()) {
			result.push_back(d);
		}
	}
	return result;
}

Idea2: two iterators
vector<int> common_element(vector<int>& a, vector<int>& b) {
	vector<int>::iterator ptr1 = a.begin();
	vector<int>::iterator ptr2 = b.begin();
	vector<int> result;
	while (ptr1 != a.end() && ptr2 != b.end()) {
		if (*ptr1 == *ptr2) {
			result.push_back(*ptr1);
			ptr1++;
			ptr2++;
		}
		else if (*ptr1 < *ptr2) { ptr1++; }
		else { ptr2++; }
	}
	return result;
}
