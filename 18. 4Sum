class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> total;                              // results container
        int n = nums.size();
        if(n<4)  return total;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-3;i++)                                  // going through all the possible value of i [0, n-3)
        {
            if(i>0 && nums[i]==nums[i-1]) continue;             // skip the duplicate value for i
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target) break;  // extreme case as smallest sum bigger than target 
            if(nums[i]+nums[n-3]+nums[n-2]+nums[n-1]<target) continue; // extreme case as biggest sum smaller than target
            for(int j=i+1;j<n-2;j++)                            // going through all the possible value of j [i+1, n-2)
            {
                if(j>i+1 && nums[j]==nums[j-1]) continue;               // skip the duplicate value for j 
                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;  // extreme case as smallest sum bigger than target
                if(nums[i]+nums[j]+nums[n-2]+nums[n-1]<target) continue; // extreme case as biggest sum smaller than target
                int left=j+1,right=n-1;
                while(left<right){
                    int sum=nums[left]+nums[right]+nums[i]+nums[j];   // set the value of i and j, the same operation as 2Sum
                    if(sum<target) left++;
                    else if(sum>target) right--;
                    else{
                        total.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]}); // find a solution and add to the array
                        do{left++;}while(nums[left]==nums[left-1] && left<right); // skip the same value appear for left 
                        do{right--;}while(nums[right]==nums[right+1] && left<right); // skip the same value appear for right 
                    }
                }
            }
        }
        return total;
    }
};

Note: break    ->  means stop all the loops and go all the process under the loops;
      continue ->  means stop the code under current iteration and run the next iteration of the loop
